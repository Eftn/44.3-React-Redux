{"ast":null,"code":"// calculate the total price rounded to two decimals\n// toFixed returns a string so we convert to a number\n// discount amount is a % amount from redux\nexport function calculateCartTotal(products, cart) {\n  let discountAmount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let total = 0;\n\n  for (let id in products) {\n    const {\n      price\n    } = products[id];\n    const quantity = cart[id] || 0;\n    total += price * quantity;\n  }\n\n  let totalWithDiscount = total * (1 - discountAmount);\n  return totalWithDiscount.toFixed(2);\n} // can't just calculate the length so we sum the quantity key for each item\n\nexport function calculateTotalQuantity(cart) {\n  let totalQuantity = 0;\n\n  for (let id in cart) {\n    totalQuantity += cart[id];\n  }\n\n  return totalQuantity;\n}","map":{"version":3,"sources":["C:/Users/eftn/OneDrive/react-router/react-redux-patterns-demo/redux-shoply-solution/src/calculations.js"],"names":["calculateCartTotal","products","cart","discountAmount","total","id","price","quantity","totalWithDiscount","toFixed","calculateTotalQuantity","totalQuantity"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,kBAAT,CAA4BC,QAA5B,EAAsCC,IAAtC,EAAgE;AAAA,MAApBC,cAAoB,uEAAH,CAAG;AACrE,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,EAAT,IAAeJ,QAAf,EAAyB;AACvB,UAAM;AAAEK,MAAAA;AAAF,QAAYL,QAAQ,CAACI,EAAD,CAA1B;AACA,UAAME,QAAQ,GAAGL,IAAI,CAACG,EAAD,CAAJ,IAAY,CAA7B;AACAD,IAAAA,KAAK,IAAIE,KAAK,GAAGC,QAAjB;AACD;;AACD,MAAIC,iBAAiB,GAAGJ,KAAK,IAAI,IAAID,cAAR,CAA7B;AACA,SAAOK,iBAAiB,CAACC,OAAlB,CAA0B,CAA1B,CAAP;AACD,C,CAED;;AACA,OAAO,SAASC,sBAAT,CAAgCR,IAAhC,EAAsC;AAC3C,MAAIS,aAAa,GAAG,CAApB;;AACA,OAAK,IAAIN,EAAT,IAAeH,IAAf,EAAqB;AACnBS,IAAAA,aAAa,IAAIT,IAAI,CAACG,EAAD,CAArB;AACD;;AACD,SAAOM,aAAP;AACD","sourcesContent":["// calculate the total price rounded to two decimals\n// toFixed returns a string so we convert to a number\n// discount amount is a % amount from redux\nexport function calculateCartTotal(products, cart, discountAmount = 0) {\n  let total = 0;\n  for (let id in products) {\n    const { price } = products[id];\n    const quantity = cart[id] || 0;\n    total += price * quantity;\n  }\n  let totalWithDiscount = total * (1 - discountAmount);\n  return totalWithDiscount.toFixed(2);\n}\n\n// can't just calculate the length so we sum the quantity key for each item\nexport function calculateTotalQuantity(cart) {\n  let totalQuantity = 0;\n  for (let id in cart) {\n    totalQuantity += cart[id];\n  }\n  return totalQuantity;\n}\n"]},"metadata":{},"sourceType":"module"}